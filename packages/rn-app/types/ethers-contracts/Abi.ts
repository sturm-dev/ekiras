/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AbiInterface extends utils.Interface {
  functions: {
    "addTransactionId(uint256)": FunctionFragment;
    "addressToPostIds(address,uint256)": FunctionFragment;
    "addressToUsername(address)": FunctionFragment;
    "createPost(string)": FunctionFragment;
    "deleteOwnPost(uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "postIndex()": FunctionFragment;
    "posts(uint256)": FunctionFragment;
    "transactionIds(uint256)": FunctionFragment;
    "updateMyUsername(string)": FunctionFragment;
    "usernameToAddress(string)": FunctionFragment;
    "votePost(uint256,bool)": FunctionFragment;
    "votesDown(uint256,address)": FunctionFragment;
    "votesUp(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTransactionId"
      | "addressToPostIds"
      | "addressToUsername"
      | "createPost"
      | "deleteOwnPost"
      | "manager"
      | "postIndex"
      | "posts"
      | "transactionIds"
      | "updateMyUsername"
      | "usernameToAddress"
      | "votePost"
      | "votesDown"
      | "votesUp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTransactionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToPostIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToUsername",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteOwnPost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "postIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "posts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMyUsername",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usernameToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votePost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "votesDown",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votesUp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTransactionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToPostIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteOwnPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMyUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usernameToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votePost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votesDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votesUp", data: BytesLike): Result;

  events: {
    "AddTransactionIdEvent(uint256)": EventFragment;
    "CreatePostEvent(uint256,uint256,address,string,uint256,uint256)": EventFragment;
    "DeletePostEvent(uint256)": EventFragment;
    "UpdateUsernameEvent(address,string)": EventFragment;
    "VoteEvent(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddTransactionIdEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePostEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeletePostEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUsernameEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteEvent"): EventFragment;
}

export interface AddTransactionIdEventEventObject {
  _transactionId: BigNumber;
}
export type AddTransactionIdEventEvent = TypedEvent<
  [BigNumber],
  AddTransactionIdEventEventObject
>;

export type AddTransactionIdEventEventFilter =
  TypedEventFilter<AddTransactionIdEventEvent>;

export interface CreatePostEventEventObject {
  _id: BigNumber;
  _createdDate: BigNumber;
  _author: string;
  _text: string;
  _upVotesCount: BigNumber;
  _downVotesCount: BigNumber;
}
export type CreatePostEventEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, BigNumber],
  CreatePostEventEventObject
>;

export type CreatePostEventEventFilter = TypedEventFilter<CreatePostEventEvent>;

export interface DeletePostEventEventObject {
  _id: BigNumber;
}
export type DeletePostEventEvent = TypedEvent<
  [BigNumber],
  DeletePostEventEventObject
>;

export type DeletePostEventEventFilter = TypedEventFilter<DeletePostEventEvent>;

export interface UpdateUsernameEventEventObject {
  _userAddress: string;
  _text: string;
}
export type UpdateUsernameEventEvent = TypedEvent<
  [string, string],
  UpdateUsernameEventEventObject
>;

export type UpdateUsernameEventEventFilter =
  TypedEventFilter<UpdateUsernameEventEvent>;

export interface VoteEventEventObject {
  _postId: BigNumber;
  _upVotesCount: BigNumber;
  _downVotesCount: BigNumber;
}
export type VoteEventEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  VoteEventEventObject
>;

export type VoteEventEventFilter = TypedEventFilter<VoteEventEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTransactionId(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressToPostIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addressToUsername(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPost(
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteOwnPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    postIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        id: BigNumber;
        createdDate: BigNumber;
        author: string;
        text: string;
        upVotesCount: BigNumber;
        downVotesCount: BigNumber;
      }
    >;

    transactionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateMyUsername(
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usernameToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    votePost(
      _postId: PromiseOrValue<BigNumberish>,
      _voteIsTypeUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votesDown(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    votesUp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addTransactionId(
    _transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressToPostIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addressToUsername(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  createPost(
    _text: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteOwnPost(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  postIndex(overrides?: CallOverrides): Promise<BigNumber>;

  posts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber;
      createdDate: BigNumber;
      author: string;
      text: string;
      upVotesCount: BigNumber;
      downVotesCount: BigNumber;
    }
  >;

  transactionIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateMyUsername(
    _text: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usernameToAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  votePost(
    _postId: PromiseOrValue<BigNumberish>,
    _voteIsTypeUp: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votesDown(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votesUp(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addTransactionId(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressToPostIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToUsername(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createPost(
      _text: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteOwnPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    postIndex(overrides?: CallOverrides): Promise<BigNumber>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        id: BigNumber;
        createdDate: BigNumber;
        author: string;
        text: string;
        upVotesCount: BigNumber;
        downVotesCount: BigNumber;
      }
    >;

    transactionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateMyUsername(
      _text: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usernameToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    votePost(
      _postId: PromiseOrValue<BigNumberish>,
      _voteIsTypeUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    votesDown(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votesUp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddTransactionIdEvent(uint256)"(
      _transactionId?: null
    ): AddTransactionIdEventEventFilter;
    AddTransactionIdEvent(
      _transactionId?: null
    ): AddTransactionIdEventEventFilter;

    "CreatePostEvent(uint256,uint256,address,string,uint256,uint256)"(
      _id?: null,
      _createdDate?: null,
      _author?: null,
      _text?: null,
      _upVotesCount?: null,
      _downVotesCount?: null
    ): CreatePostEventEventFilter;
    CreatePostEvent(
      _id?: null,
      _createdDate?: null,
      _author?: null,
      _text?: null,
      _upVotesCount?: null,
      _downVotesCount?: null
    ): CreatePostEventEventFilter;

    "DeletePostEvent(uint256)"(_id?: null): DeletePostEventEventFilter;
    DeletePostEvent(_id?: null): DeletePostEventEventFilter;

    "UpdateUsernameEvent(address,string)"(
      _userAddress?: null,
      _text?: null
    ): UpdateUsernameEventEventFilter;
    UpdateUsernameEvent(
      _userAddress?: null,
      _text?: null
    ): UpdateUsernameEventEventFilter;

    "VoteEvent(uint256,uint256,uint256)"(
      _postId?: null,
      _upVotesCount?: null,
      _downVotesCount?: null
    ): VoteEventEventFilter;
    VoteEvent(
      _postId?: null,
      _upVotesCount?: null,
      _downVotesCount?: null
    ): VoteEventEventFilter;
  };

  estimateGas: {
    addTransactionId(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressToPostIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToUsername(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPost(
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteOwnPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    postIndex(overrides?: CallOverrides): Promise<BigNumber>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMyUsername(
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usernameToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePost(
      _postId: PromiseOrValue<BigNumberish>,
      _voteIsTypeUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votesDown(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesUp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTransactionId(
      _transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressToPostIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressToUsername(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPost(
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteOwnPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMyUsername(
      _text: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usernameToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePost(
      _postId: PromiseOrValue<BigNumberish>,
      _voteIsTypeUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votesDown(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesUp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
